@page "/conceptolist"

@layout MainLayout
@inject SweetAlertService swal
@inject IGeoTimeConnect geoConnect
@inject NavigationManager NavigationManager

<div class="card">
    <PageMant Titulo="@Titulo" OnClickAddSelected="OnClickAdd" />
    <div class="card-body">

        @if (InProcess)
        {
            <Spinner></Spinner>
        }
        <Grid @ref="grid" TItem="cConcepto" class="Color-table custom-table table table-hover table-bordered table-striped "
              DataProvider="modelDataProvider" AllowFiltering="true" Responsive="true"
              AllowPaging="false" PageSize="10" PageSizeSelectorVisible="false" PageSizeSelectorItems="@(new int[] {10,50,100,200,500})"
              PaginationItemsTextFormat="{0} - {1} of {2} items" ItemsPerPageText=""
              HeaderRowCssClass="custom-header border-bottom-0"
              FiltersRowCssClass="custom-filter text-white border-bottom-0">

            <GridColumn TItem="cConcepto" HeaderText="Concepto" PropertyName="Concepto">
                @context.Concepto
            </GridColumn>
            <GridColumn TItem="cConcepto" HeaderText="Descripción" PropertyName="Descripcion">
                @context.Descripcion
            </GridColumn>
            <GridColumn TItem="cConcepto" HeaderText="Equivalencia" PropertyName="nominaeq">
                @context.nominaeq
            </GridColumn>     

            <GridColumn TItem="cConcepto" HeaderText="Seleccionar" PropertyName="selec" Filerable="false">
                <Button Color="ButtonColor.Secondary" @onclick="@((e)=> OnSelect(e, @context.Concepto))" Class="btn btn-light rounded-circle">
                    <Icon Name="IconName.PencilFill" Size="IconSize.x5" />
                </Button>
                <Button Color="ButtonColor.Danger" @onclick="@((e)=> OnDelete(e, @context.Concepto))" Class="btn btn-danger rounded-circle">
                    <Icon Name="IconName.Trash" Size="IconSize.x5" />
                </Button>
            </GridColumn>
        </Grid>
    </div>
</div>

@code {

    BlazorBootstrap.Grid<cConcepto> grid;
    private IEnumerable<cConcepto> concepto;
    private string Titulo = "Conceptos";
    private string UrlRetorno = "/principal";
    private bool InProcess = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<cConcepto>> modelDataProvider(GridDataProviderRequest<cConcepto> request)
    {
        if (concepto is null)
            concepto = await GetConceptos();


        return await Task.FromResult(request.ApplyTo(concepto));
    }

    private async Task<IEnumerable<cConcepto>> GetConceptos()
    {
        List<cConcepto> conceptos = new();
        try
        {
            conceptos = (await geoConnect.GetConcepto()).ToList();

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", "Al cargar los conceptos." + e.Message, SweetAlertIcon.Error);
        }

        InProcess = false;
        StateHasChanged();
        return conceptos;
    }

    private async Task OnClickAdd()
    {
        NavigationManager.NavigateTo("/conceptodetalle/0/1");
    }

    protected async void OnSelect(MouseEventArgs mouseEventArgs, string id)
    {
        NavigationManager.NavigateTo($"/conceptodetalle/{id}/2");
    }

    protected async void OnDelete(MouseEventArgs mouseEventArgs, string id)
    {
        NavigationManager.NavigateTo($"/conceptodetalle/{id}/3");
    }
}
